version: "3"

services:
  postgres:
    container_name: postgres
    image: neonlabsorg/accountsdb:${REVISION:-latest}
    command: postgres -c 'max_connections=1000'
    environment:
      POSTGRES_DB: solana
      POSTGRES_USER: solana-user
      POSTGRES_PASSWORD: solana-pass
    hostname: postgres
    ports:
      - 127.0.0.1:5432:5432
    expose:
      - "5432"
    networks:
      - net
    healthcheck:
      test: [ CMD-SHELL, "pg_isready -h postgres -p 5432 -U solana-user" ]
      interval: 5s
      timeout: 10s
      retries: 10
      start_period: 5s

  validator:
    container_name: validator
    image: neonlabsorg/solana-accountsdb:${REVISION:-latest}
    environment:
      SOLANA_URL: http://validator:8899
      RUST_LOG: solana_runtime::system_instruction_processor=debug,solana_runtime::message_processor=debug,solana_bpf_loader=debug,solana_rbpf=debug
      SOLANA_RUN_SH_VALIDATOR_ARGS: >
        --accountsdb-plugin-config /opt/accountsdb-plugin-config.json
    hostname: validator
    ports:
      - 0.0.0.0:8899:8899
    expose:
      - "8899"
      - "9900"
      - "8900"
      - "8001"
      - "8001-8009/udp"
    networks:
      - net
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      # Must be available from outside (calling without -u causes premature result)
      test: [ CMD-SHELL, "solana cluster-version -u http://validator:8899" ]
      interval: 5s
      timeout: 10s
      retries: 10
      start_period: 10s

  evm_loader:
    container_name: evm_loader
    image: neonlabsorg/evm_loader:latest
    environment:
      - SOLANA_URL=http://validator:8899
    networks:
      - net
    depends_on:
      validator:
        condition: service_healthy
    command: bash -c "create-test-accounts.sh 1 && deploy-evm.sh"

  dbcreation:
    container_name: dbcreation
    image: neonlabsorg/proxy:latest
    environment:
      SOLANA_URL: http://validator:8899
      POSTGRES_DB: solana
      POSTGRES_USER: solana-user
      POSTGRES_PASSWORD: solana-pass
      POSTGRES_HOST: postgres
    entrypoint: proxy/run-dbcreation.sh
    networks:
      - net
    depends_on:
      postgres:
        condition: service_healthy
      evm_loader:
        condition: service_completed_successfully

  proxy:
    container_name: proxy
    image: neonlabsorg/proxy:latest
    environment:
      SOLANA_URL: http://validator:8899
      FAUCET_URL: http://faucet:3333
      POSTGRES_DB: solana
      POSTGRES_USER: solana-user
      POSTGRES_PASSWORD: solana-pass
      LOG_NEON_CLI_DEBUG: "YES"
      FUZZING_BLOCKHASH: "YES"
      CONFIG: ci
      PP_SOLANA_URL: ${CI_PP_SOLANA_URL:-https://api.devnet.solana.com}
      PYTH_MAPPING_ACCOUNT: ${CI_PYTH_MAPPING_ACCOUNT:-BmA9Z6FjioHJPpjT39QazZyhDRUdZy2ezwx4GiDdE2u2}
      MIN_OPERATOR_BALANCE_TO_WARN: 4565760000 # = 913152000 * 5 (5 storage accounts) = 4.56576 SOL
      MIN_OPERATOR_BALANCE_TO_ERR: 913152000 # = solana rent 131072 (= Rent-exempt minimum: 0.913152 SOL) SOLs to create a storage
      MINIMAL_GAS_PRICE: 1
      ENABLE_PRIVATE_API: "YES"
      ALLOW_UNDERPRICED_TX_WITHOUT_CHAINID: "YES"
      LOG_FULL_OBJECT_INFO: "YES"
    hostname: proxy
    depends_on:
      dbcreation:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
      evm_loader:
        condition: service_completed_successfully
      indexer:
        condition: service_started
    ports:
      - 127.0.0.1:9090:9090
    expose:
      - "8888"
      - "9090"
    networks:
      - net
    entrypoint: proxy/run-test-proxy.sh
    healthcheck:
      test: [ CMD-SHELL, "/opt/health_check_proxy.sh" ]
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 5s

  deploy_contracts:
    container_name: deploy_contracts
    image: neonlabsorg/evm_loader:latest
    environment:
      - SOLANA_URL=http://validator:8899
      - SPL_TOKEN_AUTHORITY=/opt/contracts/ci-tokens/owner-keypair.json
    networks:
      - net
    depends_on:
      proxy:
        condition: service_healthy
    command: bash -c "create-test-accounts.sh 1 && deploy-contracts.sh"

networks:
  net:
